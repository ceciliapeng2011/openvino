// Copyright (C) 2018-2021 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#include "../../shared/include/op.hpp"

using namespace ngraph;
using namespace ngraph::frontend;

static const std::string PDPD = "pdpd";
static const std::string PATH_TO_MODELS = "/paddlepaddle/models/";

using conv2dTransposeTestParam = FrontendOpTestParam;
using conv2dTransposeTest = FrontendOpTest;

static conv2dTransposeTestParam conv2d_transpose_SAME_padding() {
    conv2dTransposeTestParam res;
    res.m_frontEndName = PDPD;
    res.m_modelsPath =   PATH_TO_MODEL;
    res.m_modelName =    "conv2d_transpose_SAME_padding";

    res.inputs.emplace_back(test::NDArray<float, 4>{{{{{0.f, 1.f, 2.f, 3.f, 4.f},
                                                          {5.f, 6.f, 7.f, 8.f, 9.f},
                                                          {10.f, 11.f, 12.f, 13.f, 14.f},
                                                          {15.f, 16.f, 17.f, 18.f, 19.f},
                                                          {20.f, 21.f, 22.f, 23.f, 24.f},
                                                          {25.f, 26.f, 27.f, 28.f, 29.f},
                                                          {30.f, 31.f, 32.f, 33.f, 34.f}}}}}
            .get_vector());


    res.expected_outputs.emplace_back(test::NDArray<float, 4>({{{{0.00, 0.00, 1.00, 1.00, 3.00, 2.00, 5.00, 3.00, 7.00, 4.00, 4.00 },
                                                                {0.00, 0.00, 1.00, 1.00, 3.00, 2.00, 5.00, 3.00, 7.00, 4.00, 4.00 },
                                                                {5.00, 5.00, 12.00, 7.00, 16.00, 9.00, 20.00, 11.00, 24.00, 13.00, 13.00 },
                                                                {5.00, 5.00, 11.00, 6.00, 13.00, 7.00, 15.00, 8.00, 17.00, 9.00, 9.00 },
                                                                {15.00, 15.00, 32.00, 17.00, 36.00, 19.00, 40.00, 21.00, 44.00, 23.00, 23.00 },
                                                                {10.00, 10.00, 21.00, 11.00, 23.00, 12.00, 25.00, 13.00, 27.00, 14.00, 14.00 },
                                                                {25.00, 25.00, 52.00, 27.00, 56.00, 29.00, 60.00, 31.00, 64.00, 33.00, 33.00 },
                                                                {15.00, 15.00, 31.00, 16.00, 33.00, 17.00, 35.00, 18.00, 37.00, 19.00, 19.00 },
                                                                {35.00, 35.00, 72.00, 37.00, 76.00, 39.00, 80.00, 41.00, 84.00, 43.00, 43.00 },
                                                                {20.00, 20.00, 41.00, 21.00, 43.00, 22.00, 45.00, 23.00, 47.00, 24.00, 24.00 },
                                                                {45.00, 45.00, 92.00, 47.00, 96.00, 49.00, 100.00, 51.00, 104.00, 53.00, 53.00 },
                                                                {25.00, 25.00, 51.00, 26.00, 53.00, 27.00, 55.00, 28.00, 57.00, 29.00, 29.00 },
                                                                {55.00, 55.00, 112.00, 57.00, 116.00, 59.00, 120.00, 61.00, 124.00, 63.00, 63.00 },
                                                                {30.00, 30.00, 61.00, 31.00, 63.00, 32.00, 65.00, 33.00, 67.00, 34.00, 34.00 },
                                                                {30.00, 30.00, 61.00, 31.00, 63.00, 32.00, 65.00, 33.00, 67.00, 34.00, 34.00 }}}}).get_vector());

    return res;
}

static conv2dTransposeTestParam conv2d_transpose_VALID_padding() {
    conv2dTransposeTestParam res;
    res.m_frontEndName = PDPD;
    res.m_modelsPath =   PATH_TO_MODELS;
    res.m_modelName =    "conv2d_transpose_VALID_padding";

    res.inputs.emplace_back(test::NDArray<float, 4>{{{{{0.f, 1.f, 2.f, 3.f, 4.f},
                                                              {5.f, 6.f, 7.f, 8.f, 9.f},
                                                              {10.f, 11.f, 12.f, 13.f, 14.f},
                                                              {15.f, 16.f, 17.f, 18.f, 19.f},
                                                              {20.f, 21.f, 22.f, 23.f, 24.f},
                                                              {25.f, 26.f, 27.f, 28.f, 29.f},
                                                              {30.f, 31.f, 32.f, 33.f, 34.f}}}}}
                                    .get_vector());


    res.expected_outputs.emplace_back(test::NDArray<float, 3>({{{{0.00, 0.00, 1.00, 1.00, 3.00, 2.00, 5.00, 3.00, 7.00, 4.00, 4.00 },
                                                                {0.00, 0.00, 1.00, 1.00, 3.00, 2.00, 5.00, 3.00, 7.00, 4.00, 4.00 },
                                                                {5.00, 5.00, 12.00, 7.00, 16.00, 9.00, 20.00, 11.00, 24.00, 13.00, 13.00 },
                                                                {5.00, 5.00, 11.00, 6.00, 13.00, 7.00, 15.00, 8.00, 17.00, 9.00, 9.00 },
                                                                {15.00, 15.00, 32.00, 17.00, 36.00, 19.00, 40.00, 21.00, 44.00, 23.00, 23.00 },
                                                                {10.00, 10.00, 21.00, 11.00, 23.00, 12.00, 25.00, 13.00, 27.00, 14.00, 14.00 },
                                                                {25.00, 25.00, 52.00, 27.00, 56.00, 29.00, 60.00, 31.00, 64.00, 33.00, 33.00 },
                                                                {15.00, 15.00, 31.00, 16.00, 33.00, 17.00, 35.00, 18.00, 37.00, 19.00, 19.00 },
                                                                {35.00, 35.00, 72.00, 37.00, 76.00, 39.00, 80.00, 41.00, 84.00, 43.00, 43.00 },
                                                                {20.00, 20.00, 41.00, 21.00, 43.00, 22.00, 45.00, 23.00, 47.00, 24.00, 24.00 },
                                                                {45.00, 45.00, 92.00, 47.00, 96.00, 49.00, 100.00, 51.00, 104.00, 53.00, 53.00 },
                                                                {25.00, 25.00, 51.00, 26.00, 53.00, 27.00, 55.00, 28.00, 57.00, 29.00, 29.00 },
                                                                {55.00, 55.00, 112.00, 57.00, 116.00, 59.00, 120.00, 61.00, 124.00, 63.00, 63.00 },
                                                                {30.00, 30.00, 61.00, 31.00, 63.00, 32.00, 65.00, 33.00, 67.00, 34.00, 34.00 },
                                                                {30.00, 30.00, 61.00, 31.00, 63.00, 32.00, 65.00, 33.00, 67.00, 34.00, 34.00 }}}}).get_vector());

    return res;
}

static conv2dTransposeTestParam conv2d_transpose_strides_padding() {
    conv2dTransposeTestParam res;
    res.m_frontEndName = PDPD;
    res.m_modelsPath =   PATH_TO_MODELS;
    res.m_modelName =    "conv2d_transpose_strides_padding";

    res.inputs.emplace_back(test::NDArray<float, 4>{{{{{0.f, 1.f, 2.f, 3.f, 4.f},
                                                              {5.f, 6.f, 7.f, 8.f, 9.f},
                                                              {10.f, 11.f, 12.f, 13.f, 14.f},
                                                              {15.f, 16.f, 17.f, 18.f, 19.f},
                                                              {20.f, 21.f, 22.f, 23.f, 24.f},
                                                              {25.f, 26.f, 27.f, 28.f, 29.f},
                                                              {30.f, 31.f, 32.f, 33.f, 34.f}}}}}
                                    .get_vector());


    res.expected_outputs.emplace_back(test::NDArray<float, 4>({{{{0.00, 1.00, 1.00, 3.00, 2.00, 5.00, 3.00, 7.00, 4.00 },
                                                                {5.00, 12.00, 7.00, 16.00, 9.00, 20.00, 11.00, 24.00, 13.00 },
                                                                {5.00, 11.00, 6.00, 13.00, 7.00, 15.00, 8.00, 17.00, 9.00 },
                                                                {15.00, 32.00, 17.00, 36.00, 19.00, 40.00, 21.00, 44.00, 23.00 },
                                                                {10.00, 21.00, 11.00, 23.00, 12.00, 25.00, 13.00, 27.00, 14.00 },
                                                                {25.00, 52.00, 27.00, 56.00, 29.00, 60.00, 31.00, 64.00, 33.00 },
                                                                {15.00, 31.00, 16.00, 33.00, 17.00, 35.00, 18.00, 37.00, 19.00 },
                                                                {35.00, 72.00, 37.00, 76.00, 39.00, 80.00, 41.00, 84.00, 43.00 },
                                                                {20.00, 41.00, 21.00, 43.00, 22.00, 45.00, 23.00, 47.00, 24.00 },
                                                                {45.00, 92.00, 47.00, 96.00, 49.00, 100.00, 51.00, 104.00, 53.00 },
                                                                {25.00, 51.00, 26.00, 53.00, 27.00, 55.00, 28.00, 57.00, 29.00 },
                                                                {55.00, 112.00, 57.00, 116.00, 59.00, 120.00, 61.00, 124.00, 63.00 },
                                                                {30.00, 61.00, 31.00, 63.00, 32.00, 65.00, 33.00, 67.00, 34.00 }}}}).get_vector());

    return res;
}

static conv2dTransposeTestParam conv2d_transpose_strides_no_padding() {
    conv2dTransposeTestParam res;
    res.m_frontEndName = PDPD;
    res.m_modelsPath =   PATH_TO_MODELS;
    res.m_modelName =    "conv2d_transpose_strides_no_padding";

    res.inputs.emplace_back(test::NDArray<float, 4>{{{{{0.f, 1.f, 2.f, 3.f, 4.f},
                                                              {5.f, 6.f, 7.f, 8.f, 9.f},
                                                              {10.f, 11.f, 12.f, 13.f, 14.f},
                                                              {15.f, 16.f, 17.f, 18.f, 19.f},
                                                              {20.f, 21.f, 22.f, 23.f, 24.f},
                                                              {25.f, 26.f, 27.f, 28.f, 29.f},
                                                              {30.f, 31.f, 32.f, 33.f, 34.f}}}}}
                                    .get_vector());


    res.expected_outputs.emplace_back(test::NDArray<float, 3>({{{{0.00, 0.00, 1.00, 1.00, 3.00, 2.00, 5.00, 3.00, 7.00, 4.00, 4.00 },
                                                                {0.00, 0.00, 1.00, 1.00, 3.00, 2.00, 5.00, 3.00, 7.00, 4.00, 4.00 },
                                                                {5.00, 5.00, 12.00, 7.00, 16.00, 9.00, 20.00, 11.00, 24.00, 13.00, 13.00 },
                                                                {5.00, 5.00, 11.00, 6.00, 13.00, 7.00, 15.00, 8.00, 17.00, 9.00, 9.00 },
                                                                {15.00, 15.00, 32.00, 17.00, 36.00, 19.00, 40.00, 21.00, 44.00, 23.00, 23.00 },
                                                                {10.00, 10.00, 21.00, 11.00, 23.00, 12.00, 25.00, 13.00, 27.00, 14.00, 14.00 },
                                                                {25.00, 25.00, 52.00, 27.00, 56.00, 29.00, 60.00, 31.00, 64.00, 33.00, 33.00 },
                                                                {15.00, 15.00, 31.00, 16.00, 33.00, 17.00, 35.00, 18.00, 37.00, 19.00, 19.00 },
                                                                {35.00, 35.00, 72.00, 37.00, 76.00, 39.00, 80.00, 41.00, 84.00, 43.00, 43.00 },
                                                                {20.00, 20.00, 41.00, 21.00, 43.00, 22.00, 45.00, 23.00, 47.00, 24.00, 24.00 },
                                                                {45.00, 45.00, 92.00, 47.00, 96.00, 49.00, 100.00, 51.00, 104.00, 53.00, 53.00 },
                                                                {25.00, 25.00, 51.00, 26.00, 53.00, 27.00, 55.00, 28.00, 57.00, 29.00, 29.00 },
                                                                {55.00, 55.00, 112.00, 57.00, 116.00, 59.00, 120.00, 61.00, 124.00, 63.00, 63.00 },
                                                                {30.00, 30.00, 61.00, 31.00, 63.00, 32.00, 65.00, 33.00, 67.00, 34.00, 34.00 },
                                                                {30.00, 30.00, 61.00, 31.00, 63.00, 32.00, 65.00, 33.00, 67.00, 34.00, 34.00 }}}}).get_vector());

    return res;
}

static conv2dTransposeTestParam conv2d_transpose_strides_assymetric_padding() {
    conv2dTransposeTestParam res;
    res.m_frontEndName = PDPD;
    res.m_modelsPath =   PATH_TO_MODELS;
    res.m_modelName =    "conv2d_transpose_strides_assymetric_padding";

    res.inputs.emplace_back(test::NDArray<float, 4>{{{{{0.f, 1.f, 2.f, 3.f, 4.f},
                                                              {5.f, 6.f, 7.f, 8.f, 9.f},
                                                              {10.f, 11.f, 12.f, 13.f, 14.f},
                                                              {15.f, 16.f, 17.f, 18.f, 19.f},
                                                              {20.f, 21.f, 22.f, 23.f, 24.f},
                                                              {25.f, 26.f, 27.f, 28.f, 29.f},
                                                              {30.f, 31.f, 32.f, 33.f, 34.f}}}}}
                                    .get_vector());


    res.expected_outputs.emplace_back(test::NDArray<float, 4>({{{{0.00, 0.00, 1.00, 1.00, 3.00, 2.00, 5.00, 3.00, 7.00, 4.00 },
                                                                {5.00, 5.00, 12.00, 7.00, 16.00, 9.00, 20.00, 11.00, 24.00, 13.00 },
                                                                {5.00, 5.00, 11.00, 6.00, 13.00, 7.00, 15.00, 8.00, 17.00, 9.00 },
                                                                {15.00, 15.00, 32.00, 17.00, 36.00, 19.00, 40.00, 21.00, 44.00, 23.00 },
                                                                {10.00, 10.00, 21.00, 11.00, 23.00, 12.00, 25.00, 13.00, 27.00, 14.00 },
                                                                {25.00, 25.00, 52.00, 27.00, 56.00, 29.00, 60.00, 31.00, 64.00, 33.00 },
                                                                {15.00, 15.00, 31.00, 16.00, 33.00, 17.00, 35.00, 18.00, 37.00, 19.00 },
                                                                {35.00, 35.00, 72.00, 37.00, 76.00, 39.00, 80.00, 41.00, 84.00, 43.00 },
                                                                {20.00, 20.00, 41.00, 21.00, 43.00, 22.00, 45.00, 23.00, 47.00, 24.00 },
                                                                {45.00, 45.00, 92.00, 47.00, 96.00, 49.00, 100.00, 51.00, 104.00, 53.00 },
                                                                {25.00, 25.00, 51.00, 26.00, 53.00, 27.00, 55.00, 28.00, 57.00, 29.00 },
                                                                {55.00, 55.00, 112.00, 57.00, 116.00, 59.00, 120.00, 61.00, 124.00, 63.00 },
                                                                {30.00, 30.00, 61.00, 31.00, 63.00, 32.00, 65.00, 33.00, 67.00, 34.00 }}}}}).get_vector());

    return res;
}

static conv2dTransposeTestParam conv2d_transpose_dilation_assymetric_pads_strides() {
    conv2dTransposeTestParam res;
    res.m_frontEndName = PDPD;
    res.m_modelsPath =   PATH_TO_MODELS;
    res.m_modelName =    "conv2d_transpose_dilation_assymetric_pads_strides";

    res.inputs.emplace_back(test::NDArray<float, 4>{{{{{0.f, 1.f, 2.f, 3.f, 4.f},
                                                              {5.f, 6.f, 7.f, 8.f, 9.f},
                                                              {10.f, 11.f, 12.f, 13.f, 14.f},
                                                              {15.f, 16.f, 17.f, 18.f, 19.f},
                                                              {20.f, 21.f, 22.f, 23.f, 24.f},
                                                              {25.f, 26.f, 27.f, 28.f, 29.f},
                                                              {30.f, 31.f, 32.f, 33.f, 34.f}}}}}
                                    .get_vector());


    res.expected_outputs.emplace_back(test::NDArray<float, 4>({{{{1.00, 3.00, 6.00, 9.00 },
                                                                {1.00, 3.00, 6.00, 9.00 },
                                                                {11.00, 18.00, 21.00, 24.00 },
                                                                {11.00, 18.00, 21.00, 24.00 },
                                                                {11.00, 18.00, 21.00, 24.00 },
                                                                {21.00, 33.00, 36.00, 39.00 },
                                                                {21.00, 33.00, 36.00, 39.00 },
                                                                {21.00, 33.00, 36.00, 39.00 },
                                                                {31.00, 48.00, 51.00, 54.00 },
                                                                {31.00, 48.00, 51.00, 54.00 },
                                                                {31.00, 48.00, 51.00, 54.00 },
                                                                {41.00, 63.00, 66.00, 69.00 },
                                                                {41.00, 63.00, 66.00, 69.00 },
                                                                {41.00, 63.00, 66.00, 69.00 },
                                                                {51.00, 78.00, 81.00, 84.00 },
                                                                {51.00, 78.00, 81.00, 84.00 },
                                                                {51.00, 78.00, 81.00, 84.00 },
                                                                {61.00, 93.00, 96.00, 99.00 },
                                                                {61.00, 93.00, 96.00, 99.00 }}}}).get_vector());

    return res;
}

static conv2dTransposeTestParam depthwise_conv2d_transpose_convolution() {
    conv2dTransposeTestParam res;
    res.m_frontEndName = PDPD;
    res.m_modelsPath =   PATH_TO_MODELS;
    res.m_modelName =    "depthwise_conv2d_transpose_convolution";

    res.inputs.emplace_back(test::NDArray<float, 4>{{{{{0.f, 1.f, 2.f},
                                                              {3.f, 4.f, 5.f},
                                                              {6.f, 7.f, 8.f},
                                                              {9.f, 10.f, 11.f},
                                                              {12.f, 13.f, 14.f},
                                                              {15.f, 16.f, 17.f},
                                                              {18.f, 19.f, 20.f},
                                                              {21.f, 22.f, 23.f},
                                                              {24.f, 25.f, 26.f}}}}}.get_vector());


    res.expected_outputs.emplace_back(test::NDArray<float, 4>({{{{8.00, 15.00, 12.00 },
                                                                {21.00, 36.00, 27.00 },
                                                                {20.00, 33.00, 24.00 }},
                                                                {{44.00, 69.00, 48.00 },
                                                                {75.00, 117.00, 81.00 },
                                                                {56.00, 87.00, 60.00 }},
                                                                {{80.00, 123.00, 84.00 },
                                                                {129.00, 198.00, 135.00 },
                                                                {92.00, 141.00, 96.00 }}}}).get_vector());

    return res;
}

TEST_P(conv2dTransposeTest, test_conv2d_transpose) {
ASSERT_NO_THROW(validateOp());
}

INSTANTIATE_TEST_CASE_P(FrontendOpTest, conv2dTransposeTest,
        ::testing::Values(
                conv2d_transpose_VALID_padding(),
                conv2d_transpose_strides_assymetric_padding(),
                depthwise_conv2d_transpose_convolution(),
                conv2d_transpose_strides_no_padding(),
                conv2d_transpose_dilation_assymetric_pads_strides()
                ),
        conv2d_transposeTest::getTestCaseName);
